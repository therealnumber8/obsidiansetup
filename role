# clusterrole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: control-plane-monitoring-access
rules:
# For accessing component metrics and health endpoints
- nonResourceURLs: 
  - "/metrics"
  - "/healthz"
  - "/readyz"
  - "/livez"
  - "/debug/*"
  verbs: ["get"]

# For accessing Kubernetes API resources (needed for some component interactions)
- apiGroups: [""]
  resources: ["*"]
  verbs: ["get", "list", "watch"]

# For scheduler-specific endpoints
- apiGroups: ["scheduler.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]

# For controller manager specific endpoints
- apiGroups: ["controller.k8s.io"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]




# crb
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: control-plane-monitoring-binding
subjects:
- kind: ServiceAccount
  name: control-plane-monitor-sa
  namespace: your-namespace
roleRef:
  kind: ClusterRole
  name: control-plane-monitoring-access
  apiGroup: rbac.authorization.k8s.io



# create the service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: control-plane-monitor-sa
  namespace: your-namespace

# for etcd
apiVersion: v1
kind: Pod
metadata:
  name: control-plane-access-pod
  namespace: your-namespace
spec:
  serviceAccountName: control-plane-monitor-sa
  hostNetwork: true
  nodeSelector:
    node-role.kubernetes.io/control-plane: ""
  tolerations:
  - key: node-role.kubernetes.io/control-plane
    operator: Exists
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    operator: Exists
    effect: NoSchedule
  containers:
  - name: access-container
    image: curlimages/curl:latest
    command:
    - sleep
    - "86400"  # Sleep for a day to give you time to exec into the pod
    securityContext:
      privileged: true
      # Mount etcd certificates for secure communication with etcd # These are required because etcd typically uses mutual TLS authentication - name: etcd-certs mountPath: /etc/kubernetes/pki/etcd readOnly: true
    volumeMounts:
    - name: etcd-certs
      mountPath: /etc/kubernetes/pki/etcd
      readOnly: true
    - name: kubernetes-certs
      mountPath: /etc/kubernetes/pki
      readOnly: true
    - name: token
      mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      readOnly: true
  volumes:
  - name: etcd-certs
    hostPath:
      path: /etc/kubernetes/pki/etcd
      type: Directory
  - name: kubernetes-certs
    hostPath:
      path: /etc/kubernetes/pki
      type: Directory
  - name: token
    projected:
      sources:
      - serviceAccountToken:
          path: token
          expirationSeconds: 86400

# curl command for etcd
curl --cacert /etc/kubernetes/pki/etcd/ca.crt \
     --cert /etc/kubernetes/pki/etcd/healthcheck-client.crt \
     --key /etc/kubernetes/pki/etcd/healthcheck-client.key \
     https://node-ip-or-localhost:2379/metrics

# For kube-scheduler
curl -k -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
  https://localhost:10259/metrics

# For kube-controller-manager
curl -k -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
  https://localhost:10257/metrics
